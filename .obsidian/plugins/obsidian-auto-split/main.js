/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    enabledOn: {
        desktop: true,
        mobile: true
    },
    minSize: 1000,
    direction: "auto",
    editorFirst: true,
    paneToFocus: "source",
    linkPanes: true
};
class AutoSplitPlugin extends obsidian.Plugin {
    updateHasOpenFiles() {
        try {
            this.hasOpenFiles =
                this.app.workspace.getLeavesOfType("markdown").length > 0;
        }
        catch (e) {
            // it's okay to fail sometimes
        }
    }
    get isEnabledOnPlatform() {
        if (obsidian.Platform.isDesktop) {
            return this.settings.enabledOn.desktop;
        }
        else if (obsidian.Platform.isMobile) {
            return this.settings.enabledOn.mobile;
        }
        else {
            return true;
        }
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.app.workspace.onLayoutReady(() => {
                this.updateHasOpenFiles();
                this.registerEvent(this.app.workspace.on("file-open", (file) => __awaiter(this, void 0, void 0, function* () {
                    if (this.isEnabledOnPlatform &&
                        this.app.workspace.activeLeaf &&
                        !this.hasOpenFiles &&
                        file) {
                        const newState = Object.assign({}, this.app.workspace.activeLeaf.getViewState());
                        newState.state.mode =
                            newState.state.mode === "source"
                                ? "preview"
                                : "source";
                        if (this.settings.linkPanes) {
                            newState.group = this.app.workspace.activeLeaf;
                        }
                        const rootSize = getRootContainerSize(this.app);
                        let direction = this.settings.direction;
                        if (direction === "auto") {
                            direction =
                                rootSize.width >= rootSize.height
                                    ? "vertical"
                                    : "horizontal";
                        }
                        if ((direction === "vertical"
                            ? rootSize.width
                            : rootSize.height) > this.settings.minSize) {
                            const currentLeaf = this.app.workspace.activeLeaf;
                            const viewState = currentLeaf.getViewState();
                            viewState.state.mode =
                                viewState.state.mode === "preview"
                                    ? "source"
                                    : "preview";
                            const firstPane = this.settings.editorFirst
                                ? "source"
                                : "preview";
                            const newLeaf = this.app.workspace.createLeafBySplit(currentLeaf, direction, viewState.state.mode === firstPane);
                            newLeaf.openFile(file, viewState);
                            if (this.settings.linkPanes) {
                                currentLeaf.setGroupMember(newLeaf);
                            }
                            if (viewState.state.mode ===
                                this.settings.paneToFocus) {
                                this.app.workspace.setActiveLeaf(newLeaf, true, true);
                            }
                        }
                    }
                    this.updateHasOpenFiles();
                })));
            });
            this.addSettingTab(new AutoSplitSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class AutoSplitSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Auto Split Settings" });
        const { width: rootWidth, height: rootHeight } = getRootContainerSize(this.app);
        containerEl.createEl("h3", { text: "Enable On" });
        new obsidian.Setting(containerEl).setName("Desktop").addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.enabledOn.desktop)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.enabledOn.desktop = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Mobile").addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.enabledOn.mobile)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.enabledOn.mobile = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "Settings" });
        new obsidian.Setting(containerEl)
            .setName("Minimum Size")
            .setDesc(`Only split if the main area is at least this wide or tall, depending on split direction. The main area was ${rootWidth}x${rootHeight} when you opened this tab. (default: 1000)`)
            .addText(text => {
            text.inputEl.type = "number";
            text.setValue(String(this.plugin.settings.minSize)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                const valueAsNumber = Number.parseInt(value);
                this.plugin.settings.minSize = Number.isInteger(valueAsNumber)
                    ? valueAsNumber
                    : this.plugin.settings.minSize;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Split Direction")
            .setDesc("Vertical = left/right, Horizontal = up/down. Auto is based on the longer side of the main area.")
            .addDropdown(dropdown => {
            dropdown
                .addOptions({
                auto: "Auto",
                vertical: "Vertical",
                horizontal: "Horizontal"
            })
                .setValue(this.plugin.settings.direction)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.direction =
                    value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Editor First")
            .setDesc("Place the editor pane on the left (vertical) or the top (horizontal).")
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.editorFirst)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.editorFirst = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Focus On")
            .setDesc("Select which pane should be focused.")
            .addDropdown(dropdown => {
            dropdown
                .addOptions({
                source: "Editor",
                preview: "Preview"
            })
                .setValue(this.plugin.settings.paneToFocus)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.paneToFocus =
                    value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link Panes")
            .setDesc("Link the panes to keep their scroll position and open file the same.")
            .addToggle(toggle => {
            toggle
                .setValue(this.plugin.settings.linkPanes)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.linkPanes = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}
function getRootContainerSize(app) {
    const rootContainer = app.workspace.rootSplit
        .containerEl;
    if (rootContainer) {
        return {
            width: rootContainer.clientWidth,
            height: rootContainer.clientHeight
        };
    }
    else {
        console.warn(`auto-split couldn't get root container, using window size`);
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    }
}

module.exports = AutoSplitPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
